#!/bin/sh

DEFAULT_PROTON="${DEFAULT_PROTON:-/usr/share/steam/compatibilitytools.d/proton_tkg_makepkg/proton}"

headless() {
  if [ -t 0 ] && [ -t 1  ]; then
    return 1
  fi
}

msg() {
  headless && notify-send "[$(basename "$0")] $*"
  echo ":: $*"
}

! command -v wrestool >/dev/null 2>&1 && msg "please install icoutils for wrestool" && exit 1
command -v rofi >/dev/null 2>&1 && alias dmenu='rofi -dmenu'
! command -v dmenu >/dev/null 2>&1 && msg "please install dmenu or rofi" && exit 1

need_export() {
  msg "ERROR: you need to have $1 installed or you need to export $2, which defaults to $3"
  exit 1
}

environment() {
  export STEAM_RUNTIME="${STEAM_RUNTIME:-0}"
  if [ "$STEAM_RUNTIME" != "0" ]; then
    export STEAM_HOME_DIR="${STEAM_HOME_DIR:-$HOME/.steam}"
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$STEAM_HOME_DIR/ubuntu12_32/steam-runtime/pinned_libs_32:$STEAM_HOME_DIR/ubuntu12_32/steam-runtime/pinned_libs_64:/usr/lib64/qt-3.3/lib:/usr/lib64/tcl8.6:/usr/lib/wine:/usr/lib64/wine:/lib:/lib64:$STEAM_HOME_DIR/ubuntu12_32/steam-runtime/lib/i386-linux-gnu:$STEAM_HOME_DIR/ubuntu12_32/steam-runtime/usr/lib/i386-linux-gnu:$STEAM_HOME_DIR/ubuntu12_32/steam-runtime/lib/x86_64-linux-gnu:$STEAM_HOME_DIR/ubuntu12_32/steam-runtime/usr/lib/x86_64-linux-gnu:$STEAM_HOME_DIR/ubuntu12_32/steam-runtime/lib:$STEAM_HOME_DIR/ubuntu12_32/steam-runtime/usr/lib:"
    [ ! -d "$STEAM_HOME_DIR" ] &&
      need_export steam STEAM_HOME_DIR ~/.steam
  fi
  export PROTON="${PROTON:-$DEFAULT_PROTON}"
  export STEAM_COMPAT_DATA_PATH="$PWD"
  export SDL_GAMECONTROLLERCONFIG="03000000de280000ff11000001000000,Steam Virtual Gamepad,a:b0,b:b1,back:b6,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,03000000de280000fc11000001000000,Steam Controller,a:b0,b:b1,back:b6,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,030000005e040000a102000007010000,X360 Wireless Controller,a:b0,b:b1,back:b6,dpdown:b14,dpleft:b11,dpright:b12,dpup:b13,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,0000000058626f782047616d65706100,XInput Controller,a:b0,b:b1,back:b6,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,030000005e0400008e02000010010000,X360 Controller,a:b0,b:b1,back:b6,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,"
  export SDL_GAMECONTROLLER_ALLOW_STEAM_VIRTUAL_GAMEPAD="1"
  export SDL_GAMECONTROLLER_USE_BUTTON_LABELS="1"
  export SDL_VIDEO_X11_DGAMOUSE="0"
  export vblank_mode=0
  [ ! -f "$PROTON" ] &&
    need_export proton PROTON "$DEFAULT_PROTON" && echo "
you can install proton-tkg-git from the chaotic aur: https://lonewolf.pedrohlc.com/
"
}

proton() {
  (echo "import sys; __file__ = sys.argv[0] = \"$PROTON\""
   sed 's/, "steam"//g; /"waitforexitandrun"/i \
    elif sys.argv[1] == "exec": \
        g_session.run_proc(sys.argv[2:]) \
' < "$PROTON") | PYTHONPATH="$(dirname "$PROTON")" python3 - "$@"
}

tricks() {
  tricksbin="${WINETRICKS:-$(which winetricks)}"
  [ ! -f "$tricksbin" ] && echo "E: winetricks binary '$tricksbin' not found!" && exit 1
  customtricks="$(mktemp)"
  sed '/w_metadata vcrun2019 dlls/i \
    [ -d ~/.config/tricks ] && for v in ~/.config/tricks/*; do . "$v"; done && \
    echo "loaded custom tricks from ~/.config/tricks";' < "$tricksbin" > "$customtricks"
  chmod +x "$customtricks"
  protonfit exec "$customtricks" "$@"
  rm -f "$customtricks"
}

link_data_file() {
  ln -svfT "$1" "pfx/drive_c/$2"
}

link_data() {
  msg "linking data into the prefix"
  for d in data/*/; do
    bs="$(basename "$d")"
    if ! link_data_file "../../$d" "$bs"; then
      rm -rf "pfx/drive_c/$bs"
      link_data_file "../../$d" "$bs" || exit
    fi
  done
}

move_data() {
  mkdir -p data
  msg "moving data out of the prefix"
  for d in 'Program Files'  'Program Files (x86)' ProgramData users Games; do
    mv "pfx/drive_c/$d" ./data/
  done
}

run() {
  [ ! -d ./data ] && move_data
  link_data
  logfile="$(pwd)/protonfit.log"
  . ./protonfit-settings
  environment
  cd "$FIT_BASE" || exit
  proton run "$FIT_BINARY" $FIT_ARGS 2>&1 | tee -a "$logfile"
  exit
}

prefix() {
  environment
  if [ -d ./pfx ]; then
    headless && return 1
    msg "there's already a wine prefix here. are you sure you want to wipe it?"
    msg "protonfit tries to preserve your stuff by moving it to ./data, but you should always"
    msg "check that nothing important is left in pfx/ before you wipe it"
    msg
    msg "wipe prefix? (y/n)"
    read -r answer
    case "$answer" in
      y*|Y*) ;;
      *) msg "canceled" && return 1 ;;
    esac
    msg "wiping prefix"
    rm -rf ./pfx
    rm version tracked_files
  fi

  msg "initializing prefix and checking for wine cmd bugs"
  echo 'cd "."&&"cmd.exe" /c "echo test0">C:\test0 && echo test1>C:\test1 && echo test2>C:\test2 && echo n | move C:\test1 C:\test2' \
    > test.bat
  proton run cmd /c test.bat
  proton run wineserver -w
  echo
  if [ "$(tr -d '\n\r ' < pfx/drive_c/test0)" != "test0" ] ||
     [ "$(tr -d '\n\r ' < pfx/drive_c/test2)" != "test1" ]
  then
    msg "installing patched cmd.exe so fitgirl setups don't hang"
    rm ./pfx/drive_c/windows/syswow64/cmd.exe
    rm ./pfx/drive_c/windows/system32/cmd.exe
    curl --location --progress-bar \
      https://github.com/Francesco149/wine/releases/download/move-overwrite-fix-r2/cmd.exe.so \
      > ./pfx/drive_c/windows/syswow64/cmd.exe || exit
    cp ./pfx/drive_c/windows/syswow64/cmd.exe ./pfx/drive_c/windows/system32
  else
    msg "your wine is up to date! great, no need for the cmd patches then"
  fi
}

configure() {
  base="$(echo "$(pwd)/pfx/drive_c/Games/"*/)"
  [ ! -d "$base" ] &&
    msg "looks like the game failed to install, '$base' not found :[" && exit 1

  if [ ! -f ./protonfit ]; then
    msg "linking protonfit"
    ln -s "$(which protonfit)" .
  fi

  msg "generating settings"
  cat > ./protonfit-settings << EOF
export FIT_BASE="$base"
export FIT_BINARY="$(cd "$base" || exit
  find . -name '*.exe' |
  dmenu -p "Select game executable (can change this later in protofit-settings):" -l 10 ||
  find . -name '*.exe' | grep -vi uninst | grep -vi setup | sed 1q)"
export PROTON="$PROTON"

# customize these for your specific game
export DXVK_LOG_LEVEL="info"
#export PROTON_USE_WINED3D="1"
#export PROTON_USE_WINED3D11="1"
#export PROTON_NO_D3D11="1"
#export PROTON_NO_D3D10="1"
#export PROTON_NO_D9VK="1"
#export PROTON_NO_ESYNC="1"
#export PROTON_USE_VKD3D="1"       #<-----DX12 support (only for versions of proton built with DX12 support)
#export PROTON_NO_FSYNC="1"
#export PROTON_FORCE_LARGE_ADDRESS_AWARE="1"
#export PROTON_OLD_GL_STRING="1"
export PROTON_USE_SECCOMP=1 # fixes issues with shitty drm like denuvo on proton < 5.13
export RADV_PERFTEST=aco # enable ACO compiler for less shader stutter on amd cards
EOF
  chmod +x ./protonfit-settings
  . ./protonfit-settings

  msg "extracting icons"
  find "$FIT_BASE" -name '*.exe' -exec wrestool --extract "--output={}.ico" --type=14 {} \;

  msg "generating shortcut"
  deskfile="protonfit-$(basename "$FIT_BASE")-$(echo "$FIT_BASE" | md5sum | awk '{print $1}').desktop"
  cat > "$deskfile" << EOF
[Desktop Entry]
Version=1.0
Name=(protonfit) $(basename "$FIT_BASE")
Exec="$(realpath "$(pwd)/protonfit" | sed "s~[\`\$\\]~\\\&~g")"
Path=$(realpath "$(pwd)")
Icon=$(realpath "$FIT_BASE/${FIT_BINARY}").ico
Terminal=false
Type=Application
Categories=Game;
Comment=Generated by protonfit
Actions=OpenFolder;
[Desktop Action OpenFolder]
Name=Open Game Folder
Exec=xdg-open "$FIT_BASE"
EOF
  ln -svf "$(pwd)/$deskfile" "$HOME/.local/share/applications"
  cat > protonfit-README << EOF
hey, your installation is complete, here are a few tips:

* you can run $FIT_BASE/protonfit to run the game

* delete protonfit-settings to recreate the prefix. NOTE: protonfit tries to preserve your data
  by moving it to data/, but I cannot guarantee that it's not missing something. so check that
  the data directory contains your save files and whatnot before doing this.

* to force a reinstall, delete data and protonfit-settings

* it will also be available in your applications menu if you have one, however take care to launch
  the one labeled (protonfit). if you want to hide wine-generated shortcuts, remove them from
  ~/.local/share/applications/wine/Programs/Games/

* to create a shortcut on your desktop, copy $FIT_BASE/$deskfile to ~/Desktop

* edit and check $FIT_BASE/protonfit-settings for game specific settings. this is also where you
  fix your game executable if you mess up the selection

* you can find this README file at $FIT_BASE/protonfit-README
EOF
  "${EDITOR:-cat}" protonfit-README
}

install() {
  if prefix; then
    if [ ! -d ./data ]; then
      setupfile="./setup.exe"
      msg "running $setupfile"
      proton run "$setupfile"
      proton run wineserver -w
      move_data
    fi
    link_data
  fi
  configure
}

arg="$1"
[ "$arg" ] && shift
case "$arg" in
  run)
    echo "running custom command: $*"
    environment
    proton run "$@"
    ;;
  exe*)
    echo "execing $*"
    environment
    proton exec "$@"
    ;;
  tricks)
    echo "running winetricks $*"
    environment
    tricks "$@"
    ;;
  config*)
    environment
    configure
    ;;
  pre*) prefix ;;
  *)
    # if protonfit is symlinked inside a game's dir, cd there
    exedir="$(dirname "$0")"
    if [ -f "$exedir/protonfit-settings" ]; then
      cd "$exedir" || exit
    fi

    if [ ! -f ./protonfit-settings ]; then
      install
    else
      run
    fi
    ;;
esac
